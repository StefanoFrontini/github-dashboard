import type { Endpoints } from "@octokit/types";
type pullsDetailReposResponse =
  Endpoints["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"]["response"];

const mockFiles26278: pullsDetailReposResponse["data"] = [
  {
    sha: "286c6f56913d14d58239c04ec2b918a9c77102ed",
    filename:
      "packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js",
    status: "modified",
    additions: 282,
    deletions: 0,
    changes: 282,
    blob_url:
      "https://github.com/facebook/react/blob/47b6a05a146a92033d41f5dc3c20bd2987519193/packages%2Feslint-plugin-react-hooks%2F__tests__%2FESLintRuleExhaustiveDeps-test.js",
    raw_url:
      "https://github.com/facebook/react/raw/47b6a05a146a92033d41f5dc3c20bd2987519193/packages%2Feslint-plugin-react-hooks%2F__tests__%2FESLintRuleExhaustiveDeps-test.js",
    contents_url:
      "https://api.github.com/repos/facebook/react/contents/packages%2Feslint-plugin-react-hooks%2F__tests__%2FESLintRuleExhaustiveDeps-test.js?ref=47b6a05a146a92033d41f5dc3c20bd2987519193",
    patch:
      "@@ -34,6 +34,137 @@ function normalizeIndent(strings) {\n // Tests that are valid/invalid across all parsers\n const tests = {\n   valid: [\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/module';\n+\n+        function MyComponent() {\n+          useEffect(() => {\n+            console.log(someImport);\n+          }, []);\n+        }\n+      `,\n+    },\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/module';\n+        function MyComponent() {\n+          const local = someFunc();\n+          const instance = someImport();\n+          useEffect(() => {\n+            console.log(local);\n+            instance.method('/foo');\n+          }, [local]);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/module';\n+        function MyComponent() {\n+          const local = someFunc();\n+          const instance2 = someImport();\n+          const instance = someImport();\n+          useEffect(() => {\n+            console.log(local);\n+            if (true) {\n+              instance.method('/foo');\n+              instance2.method('/foo');\n+            }\n+          }, [local]);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      code: normalizeIndent`\n+        import { someImport  } from 'some/module';\n+        function MyComponent() {\n+          const local = someFunc();\n+          const instance = someImport();\n+          useEffect(() => {\n+            console.log(local);\n+            if (instance.property) {\n+              instance.method('/foo');\n+            }\n+          }, [local, instance.property]);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/non-matching-module';\n+        function MyComponent() {\n+          const local = someFunc();\n+          const instance = someImport();\n+          useEffect(() => {\n+            console.log(local);\n+            if (instance.property) {\n+              instance.method('/foo');\n+            }\n+          }, [local, instance]);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+    },\n     {\n       code: normalizeIndent`\n         function MyComponent() {\n@@ -1454,6 +1585,157 @@ const tests = {\n     },\n   ],\n   invalid: [\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/module';\n+        function MyComponent() {\n+          const instance = someImport();\n+          useEffect(() => {\n+            const instanceReady = instance.property;\n+            if (instanceReady) {\n+            }\n+          }, []);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+      errors: [\n+        {\n+          message:\n+            \"React Hook useEffect has a missing dependency: 'instance.property'. \" +\n+            'Either include it or remove the dependency array.',\n+          suggestions: [\n+            {\n+              desc: 'Update the dependencies array to be: [instance.property]',\n+              output: normalizeIndent`\n+                import { someImport } from 'some/module';\n+                function MyComponent() {\n+                  const instance = someImport();\n+                  useEffect(() => {\n+                    const instanceReady = instance.property;\n+                    if (instanceReady) {\n+                    }\n+                  }, [instance.property]);\n+                }\n+              `,\n+            },\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/module';\n+        function MyComponent() {\n+          const instance = someImport();\n+          useEffect(() => {\n+            if (instance.property) {\n+            }\n+          }, []);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+      errors: [\n+        {\n+          message:\n+            \"React Hook useEffect has a missing dependency: 'instance.property'. \" +\n+            'Either include it or remove the dependency array.',\n+          suggestions: [\n+            {\n+              desc: 'Update the dependencies array to be: [instance.property]',\n+              output: normalizeIndent`\n+                import { someImport } from 'some/module';\n+                function MyComponent() {\n+                  const instance = someImport();\n+                  useEffect(() => {\n+                    if (instance.property) {\n+                    }\n+                  }, [instance.property]);\n+                }\n+              `,\n+            },\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      code: normalizeIndent`\n+        import { someImport } from 'some/module';\n+        function MyComponent() {\n+          const local = someFunc();\n+          const instance = someImport();\n+          useEffect(() => {\n+            console.log(local);\n+            instance.method('/foo');\n+          }, [local, instance]);\n+        }\n+      `,\n+      options: [\n+        {\n+          effectDisallowedDependencies: [\n+            {\n+              module: 'some/module',\n+              imports: [\n+                {\n+                  name: 'someImport',\n+                  fields: [],\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+      errors: [\n+        {\n+          message:\n+            \"React Hook useEffect has an unnecessary dependency: 'instance'. \" +\n+            'Either exclude it or remove the dependency array.',\n+          suggestions: [\n+            {\n+              desc: 'Update the dependencies array to be: [local]',\n+              output: normalizeIndent`\n+                import { someImport } from 'some/module';\n+                function MyComponent() {\n+                  const local = someFunc();\n+                  const instance = someImport();\n+                  useEffect(() => {\n+                    console.log(local);\n+                    instance.method('/foo');\n+                  }, [local]);\n+                }\n+              `,\n+            },\n+          ],\n+        },\n+      ],\n+    },\n     {\n       code: normalizeIndent`\n         function MyComponent(props) {",
  },
  {
    sha: "b696de664b1f6bf4d3a483adef49ca3d7c2a8408",
    filename: "packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js",
    status: "modified",
    additions: 171,
    deletions: 5,
    changes: 176,
    blob_url:
      "https://github.com/facebook/react/blob/47b6a05a146a92033d41f5dc3c20bd2987519193/packages%2Feslint-plugin-react-hooks%2Fsrc%2FExhaustiveDeps.js",
    raw_url:
      "https://github.com/facebook/react/raw/47b6a05a146a92033d41f5dc3c20bd2987519193/packages%2Feslint-plugin-react-hooks%2Fsrc%2FExhaustiveDeps.js",
    contents_url:
      "https://api.github.com/repos/facebook/react/contents/packages%2Feslint-plugin-react-hooks%2Fsrc%2FExhaustiveDeps.js?ref=47b6a05a146a92033d41f5dc3c20bd2987519193",
    patch:
      "@@ -32,6 +32,39 @@ export default {\n           enableDangerousAutofixThisMayCauseInfiniteLoops: {\n             type: 'boolean',\n           },\n+          effectDisallowedDependencies: {\n+            type: 'array',\n+            minItems: 1,\n+            items: {\n+              type: 'object',\n+              additionalProperties: false,\n+              required: ['module', 'imports'],\n+              properties: {\n+                module: {\n+                  type: 'string',\n+                },\n+                imports: {\n+                  type: 'array',\n+                  items: {\n+                    type: 'object',\n+                    additionalProperties: false,\n+                    required: ['name', 'fields'],\n+                    properties: {\n+                      name: {\n+                        type: 'string',\n+                      },\n+                      fields: {\n+                        type: 'array',\n+                        items: {\n+                          type: 'string',\n+                        },\n+                      },\n+                    },\n+                  },\n+                },\n+              },\n+            },\n+          },\n         },\n       },\n     ],\n@@ -51,9 +84,23 @@ export default {\n         context.options[0].enableDangerousAutofixThisMayCauseInfiniteLoops) ||\n       false;\n \n+    const effectDisallowedDependencies =\n+      (context.options &&\n+        context.options[0] &&\n+        context.options[0].effectDisallowedDependencies) ||\n+      [];\n+\n+    const effectDisallowedDependenciesMap = new Map(\n+      effectDisallowedDependencies.map(({module, imports}) => [\n+        module,\n+        imports,\n+      ]),\n+    );\n+\n     const options = {\n       additionalHooks,\n       enableDangerousAutofixThisMayCauseInfiniteLoops,\n+      effectDisallowedDependenciesMap,\n     };\n \n     function reportProblem(problem) {\n@@ -148,6 +195,43 @@ export default {\n \n       const isArray = Array.isArray;\n \n+      // Disallowed dependencies are specified in the eslint rule config\n+      // import { moduleImport } from 'some/module'\n+      // ...\n+      // const instance = moduleImport()\n+      //       ^^^ true for this reference to 'some/module'\n+      function isDisallowedDependency(resolved) {\n+        if (!isArray(resolved.defs)) {\n+          return false;\n+        }\n+\n+        const def = resolved.defs[0];\n+        if (def == null) {\n+          return false;\n+        }\n+\n+        if (def.node.type !== 'VariableDeclarator') {\n+          return false;\n+        }\n+\n+        const resolvedImportModule = resolveImportModuleForDef(\n+          componentScope,\n+          def.node,\n+        );\n+        if (resolvedImportModule) {\n+          const {importModuleName, importName} = resolvedImportModule;\n+          let foundDependency = undefined;\n+          const moduleImports =\n+            options.effectDisallowedDependenciesMap.get(importModuleName);\n+          if (moduleImports) {\n+            // Find the import name and disallowed fields for this module\n+            foundDependency = moduleImports.find(\n+              moduleImport => moduleImport.name === importName,\n+            );\n+          }\n+          return foundDependency;\n+        }\n+      }\n       // Next we'll define a few helpers that helps us\n       // tell if some values don't have to be declared as deps.\n \n@@ -458,7 +542,25 @@ export default {\n             const isStable =\n               memoizedIsStableKnownHookValue(resolved) ||\n               memoizedIsFunctionWithoutCapturedValues(resolved);\n+\n+            const foundDisallowedDependency = isDisallowedDependency(resolved);\n+\n+            let exemptedProperty = true;\n+            if (\n+              foundDisallowedDependency &&\n+              dependencyNode.type === 'MemberExpression'\n+            ) {\n+              if (\n+                !foundDisallowedDependency.fields.includes(\n+                  dependencyNode.property.name,\n+                )\n+              ) {\n+                exemptedProperty = false;\n+              }\n+            }\n             dependencies.set(dependency, {\n+              isConfigExemptDependency:\n+                exemptedProperty && foundDisallowedDependency,\n               isStable,\n               references: [reference],\n             });\n@@ -1341,14 +1443,19 @@ function collectRecommendations({\n     };\n   }\n \n+  const exemptDependencies = new Set();\n   // Mark all required nodes first.\n   // Imagine exclamation marks next to each used deep property.\n-  dependencies.forEach((_, key) => {\n+  dependencies.forEach(({isConfigExemptDependency}, key) => {\n     const node = getOrCreateNodeByPath(depTree, key);\n     node.isUsed = true;\n     markAllParentsByPath(depTree, key, parent => {\n       parent.isSubtreeUsed = true;\n     });\n+    if (isConfigExemptDependency) {\n+      node.isConfigExemptDependency = true;\n+      exemptDependencies.add(key);\n+    }\n   });\n \n   // Mark all satisfied nodes.\n@@ -1411,7 +1518,7 @@ function collectRecommendations({\n         // `props.foo` is enough if you read `props.foo.id`.\n         return;\n       }\n-      if (child.isUsed) {\n+      if (child.isUsed && !child.isConfigExemptDependency) {\n         // Remember that no declared deps satisfied this node.\n         missingPaths.add(path);\n         // If we got here, nothing in its subtree was satisfied.\n@@ -1426,14 +1533,13 @@ function collectRecommendations({\n       );\n     });\n   }\n-\n   // Collect suggestions in the order they were originally specified.\n   const suggestedDependencies = [];\n   const unnecessaryDependencies = new Set();\n   const duplicateDependencies = new Set();\n   declaredDependencies.forEach(({key}) => {\n     // Does this declared dep satisfy a real need?\n-    if (satisfyingDependencies.has(key)) {\n+    if (satisfyingDependencies.has(key) && !exemptDependencies.has(key)) {\n       if (suggestedDependencies.indexOf(key) === -1) {\n         // Good one.\n         suggestedDependencies.push(key);\n@@ -1445,7 +1551,8 @@ function collectRecommendations({\n       if (\n         isEffect &&\n         !key.endsWith('.current') &&\n-        !externalDependencies.has(key)\n+        !externalDependencies.has(key) &&\n+        !exemptDependencies.has(key)\n       ) {\n         // Effects are allowed extra \"unnecessary\" deps.\n         // Such as resetting scroll when ID changes.\n@@ -1474,6 +1581,65 @@ function collectRecommendations({\n   };\n }\n \n+function resolveImportModuleForDef(scope, node) {\n+  let init = node.init;\n+  if (init == null) {\n+    return null;\n+  }\n+\n+  while (init.type === 'TSAsExpression') {\n+    init = init.expression;\n+  }\n+  // Detect primitive constants\n+  // const foo = 42\n+  let declaration = node.parent;\n+  if (declaration == null) {\n+    // This might happen if variable is declared after the callback.\n+    // In that case ESLint won't set up .parent refs.\n+    // So we'll set them up manually.\n+    fastFindReferenceWithParent(scope.block, node.id);\n+    declaration = node.parent;\n+    if (declaration == null) {\n+      return null;\n+    }\n+  }\n+\n+  // Detect useRouter() CallExpression\n+  if (init.type !== 'CallExpression') {\n+    return null;\n+  }\n+  const callee = init.callee;\n+  if (callee.type !== 'Identifier') {\n+    return null;\n+  }\n+  const id = node.id;\n+  const {name} = callee;\n+  if (id.type === 'Identifier') {\n+    const useRouterImport = scope.references.find(ref => {\n+      if (!isSameIdentifier(ref.identifier, callee)) {\n+        return false;\n+      }\n+      if (!ref.resolved || !ref.resolved.defs || !ref.resolved.defs[0]) {\n+        return false;\n+      }\n+      return ref.resolved.defs[0].type === 'ImportBinding';\n+    });\n+\n+    if (!useRouterImport) {\n+      return false;\n+    }\n+    const useRouterImportSource = useRouterImport.resolved.defs[0];\n+    if (useRouterImportSource.parent.type === 'ImportDeclaration') {\n+      // Check that the reference is an import declartion with source 'next/router'\n+      return {\n+        importModuleName: useRouterImportSource.parent.source.value,\n+        importName: name,\n+      };\n+    }\n+  }\n+  return null;\n+}\n+\n // If the node will result in constructing a referentially unique value, return\n // its human readable type name, else return null.\n function getConstructionExpressionType(node) {",
  },
];
export default mockFiles26278;
